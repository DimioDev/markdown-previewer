{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["renderer","marked","Renderer","link","href","text","App","props","state","markdown","placeholder","handleChange","bind","e","this","setState","target","value","className","id","onChange","type","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAKMA,EAAW,IAAIC,IAAOC,SAC5BF,EAASG,KAAO,SAAUC,EAAMC,GAC9B,MAAM,4BAAN,OAAmCD,EAAnC,aAA4CC,EAA5C,S,IAGIC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAUC,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,gDAOnB,SAAaC,GACXC,KAAKC,SAAS,CACZN,SAAUI,EAAEG,OAAOC,U,oBAIvB,WACE,OACE,gCACE,sBAAKC,UAAU,aAAf,UACE,qBAAKA,UAAU,UAAf,8BACA,0BACEC,GAAG,SACHV,SAAUK,KAAKN,MAAMC,SACrBW,SAAUN,KAAKH,aACfU,KAAK,OACLJ,MAAOH,KAAKN,MAAMC,cAGtB,qBAAKS,UAAU,cACf,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,UAAf,+BACA,qBACEI,wBAAyB,CACvBC,OAAQC,IAAUC,SAChBxB,IAAOa,KAAKN,MAAMC,SAAU,CAAET,SAAUA,MAG5CmB,GAAG,sB,GApCGO,IAAMC,WA4ClBjB,EAAW,qoCA4CFJ,ICtFAsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.48e11a2a.chunk.js","sourcesContent":["import React from 'react';\r\nimport marked from 'marked';\r\nimport DOMPurify from 'dompurify';\r\nimport './App.css';\r\n\r\nconst renderer = new marked.Renderer();\r\nrenderer.link = function (href, text) {\r\n  return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      markdown: placeholder,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleChange(e) {\r\n    this.setState({\r\n      markdown: e.target.value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"editorWrap\">\r\n          <div className=\"toolbar\">Text Input Here:</div>\r\n          <textarea\r\n            id=\"editor\"\r\n            markdown={this.state.markdown}\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            value={this.state.markdown}\r\n          />\r\n        </div>\r\n        <div className=\"converter\" />\r\n        <div className=\"previewWrap\">\r\n          <div className=\"toolbar\">Markdown Preview:</div>\r\n          <div\r\n            dangerouslySetInnerHTML={{\r\n              __html: DOMPurify.sanitize(\r\n                marked(this.state.markdown, { renderer: renderer })\r\n              ),\r\n            }}\r\n            id=\"preview\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst placeholder = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n# Markdown Previewer by Dimitar Odrinski for:\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\r\n`;\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}